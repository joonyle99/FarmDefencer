//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Project Assets/DefenceInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefenceInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefenceInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefenceInput"",
    ""maps"": [
        {
            ""name"": ""Defence Action Map"",
            ""id"": ""fd05b56e-2e5d-4da1-b764-13fd02392ec7"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""342b1b47-a0c2-422f-9a7f-6406a65b1518"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerDelta"",
                    ""type"": ""Value"",
                    ""id"": ""2dc0feb9-6f44-4331-9af3-0a1e8c6964f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPress"",
                    ""type"": ""Button"",
                    ""id"": ""92b82034-40e6-45bc-b5c2-e210d921302f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScrollY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e88f8fd0-2619-4ce3-b1b4-350caeec6e3f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f58141e-dd07-41ac-91ef-a4a2ec2ac514"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d481ada-806c-4060-8a5b-51a607304239"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbcf1a9b-14c3-4b33-ad31-40c2c865428f"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd2facf5-6359-4b06-94b7-23cc2584abc0"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Defence Action Map
        m_DefenceActionMap = asset.FindActionMap("Defence Action Map", throwIfNotFound: true);
        m_DefenceActionMap_PointerPosition = m_DefenceActionMap.FindAction("PointerPosition", throwIfNotFound: true);
        m_DefenceActionMap_PointerDelta = m_DefenceActionMap.FindAction("PointerDelta", throwIfNotFound: true);
        m_DefenceActionMap_PointerPress = m_DefenceActionMap.FindAction("PointerPress", throwIfNotFound: true);
        m_DefenceActionMap_MouseScrollY = m_DefenceActionMap.FindAction("MouseScrollY", throwIfNotFound: true);
    }

    ~@DefenceInput()
    {
        UnityEngine.Debug.Assert(!m_DefenceActionMap.enabled, "This will cause a leak and performance issues, DefenceInput.DefenceActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Defence Action Map
    private readonly InputActionMap m_DefenceActionMap;
    private List<IDefenceActionMapActions> m_DefenceActionMapActionsCallbackInterfaces = new List<IDefenceActionMapActions>();
    private readonly InputAction m_DefenceActionMap_PointerPosition;
    private readonly InputAction m_DefenceActionMap_PointerDelta;
    private readonly InputAction m_DefenceActionMap_PointerPress;
    private readonly InputAction m_DefenceActionMap_MouseScrollY;
    public struct DefenceActionMapActions
    {
        private @DefenceInput m_Wrapper;
        public DefenceActionMapActions(@DefenceInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPosition => m_Wrapper.m_DefenceActionMap_PointerPosition;
        public InputAction @PointerDelta => m_Wrapper.m_DefenceActionMap_PointerDelta;
        public InputAction @PointerPress => m_Wrapper.m_DefenceActionMap_PointerPress;
        public InputAction @MouseScrollY => m_Wrapper.m_DefenceActionMap_MouseScrollY;
        public InputActionMap Get() { return m_Wrapper.m_DefenceActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefenceActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IDefenceActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DefenceActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefenceActionMapActionsCallbackInterfaces.Add(instance);
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @PointerDelta.started += instance.OnPointerDelta;
            @PointerDelta.performed += instance.OnPointerDelta;
            @PointerDelta.canceled += instance.OnPointerDelta;
            @PointerPress.started += instance.OnPointerPress;
            @PointerPress.performed += instance.OnPointerPress;
            @PointerPress.canceled += instance.OnPointerPress;
            @MouseScrollY.started += instance.OnMouseScrollY;
            @MouseScrollY.performed += instance.OnMouseScrollY;
            @MouseScrollY.canceled += instance.OnMouseScrollY;
        }

        private void UnregisterCallbacks(IDefenceActionMapActions instance)
        {
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @PointerDelta.started -= instance.OnPointerDelta;
            @PointerDelta.performed -= instance.OnPointerDelta;
            @PointerDelta.canceled -= instance.OnPointerDelta;
            @PointerPress.started -= instance.OnPointerPress;
            @PointerPress.performed -= instance.OnPointerPress;
            @PointerPress.canceled -= instance.OnPointerPress;
            @MouseScrollY.started -= instance.OnMouseScrollY;
            @MouseScrollY.performed -= instance.OnMouseScrollY;
            @MouseScrollY.canceled -= instance.OnMouseScrollY;
        }

        public void RemoveCallbacks(IDefenceActionMapActions instance)
        {
            if (m_Wrapper.m_DefenceActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefenceActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DefenceActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefenceActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefenceActionMapActions @DefenceActionMap => new DefenceActionMapActions(this);
    public interface IDefenceActionMapActions
    {
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnPointerDelta(InputAction.CallbackContext context);
        void OnPointerPress(InputAction.CallbackContext context);
        void OnMouseScrollY(InputAction.CallbackContext context);
    }
}
